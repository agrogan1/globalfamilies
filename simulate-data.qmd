# Simulating MICS Data

This appendix details the process of creating the simulated MICS data that is employed in the examples on this website. 

MICS data are freely available, but usage of MICS requires completing a user agreement, and registering for a user account, on the MICS website, and thus MICS data should not be shared openly on a public website. 

This Appendix is highly technical. It is not necessary to understand this Appendix to benefit from the rest of this website. However, the details of creating this simulated data may be of interest to some users. 

## Call Relevant Libraries

We need to call a number of relevant R libraries to simulate the data.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| message: false

library(tibble) # new dataframes

library(ggplot2) # nifty graphs

library(labelled) # labels

library(haven) # write Stata

library(tidyr) # tidy data

library(dplyr) # wrangle data

library(lme4) # multilevel models

library(sjPlot) # nice tables for MLM

library(pander) # nice tables

```

## Setup Some Basic Parameters of the Data

Because simulation is a random process, we set a *random seed* so that the simulation produces the same data set each time it is run.

We are going to simulate data with 30 countries, and 100 individuals per country.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

set.seed(1234) # random seed

N_countries <- 30 # number of countries

N <- 100 # sample size / country

```

## Simulate Data Based on MICS

This is multilevel data where individuals are nested, or clustered, inside countries. Excellent technical and pedagogical discussions of multilevel models can be found in @Raudenbush2002, @Singer2003, @RabeHesketh2022, @Luke2004, and @Kreft1998.

### Level 2

Simulating the second level of the data is relatively easy. We simply need to provide the number of countries, and then generate random effects for each country. Random effects are discussed in the above references, but essentially represent country level differences in the data.

We also create `GII`, a *Gender Inequality Index* [@UNDPGII] variable, and `HDI`, a measure of the *Human Development Index* [@UNDPHDI], since these are country level, or Level 2 variables. 

```{r}
#| code-fold: true
#| code-summary: "Show the code"

country <- seq(1:N_countries) # sequence 1 to 30

GII <- rbinom(N_countries, 100, .25) # gender inequality index

HDI <- rbinom(N_countries, 100, .25) # Human Development Index

u0 <- rnorm(N_countries, 0, .25) # random intercept

u1 <- rnorm(N_countries, 0, .05) # random slope

randomeffects <- data.frame(country, 
                            GII, 
                            HDI, 
                            u0, 
                            u1) # dataframe of random effects

```

### Level 1

Simulating the Level 1 data is more complex. 

We `uncount` the data by `r N` to create `r N` observations for each country. We then create an `id` number. 

We create randomly simulated parental discipline variables with proportions similar to those in MICS. 

Lastly, we need to create the dependent variable. Because this is a dichotomous outcome, the process is somewhat complex. We need to craete a linear combination `z`, using regression weights derived from MICS. We then calculate predicted probabilities, and lastly generate a dichotomous `aggression` outcome from those probabilities. 

```{r}
#| code-fold: true
#| code-summary: "Show the code"

MICSsimulated <- randomeffects %>% 
  uncount(N) %>% # N individuals / country
  mutate(id = row_number()) %>% # unique id
  mutate(cd1 = rbinom(N * N_countries, 1, .38), # spank
         cd2 = rbinom(N * N_countries, 1, .05), # beat
         cd3 = rbinom(N * N_countries, 1, .64), # shout
         cd4 = rbinom(N * N_countries, 1, .78)) %>% # explain
  mutate(z = 0 + # linear combination based on MICS
           .01 * GII +
           .23 * cd1 +
           .52 * cd2 +
           .42 * cd3 +
           -.21 * cd4 + 
           u0) %>%
  mutate(p = exp(z) / (1 + exp(z))) %>% # probability
  mutate(aggression = rbinom(N * N_countries, 1, p)) %>% # binomial y
  select(id, country, GII, HDI,
         cd1, cd2, cd3, cd4, 
         aggression)

```

### Variable Labels

We add variable labels to the data which will help us to understand the data as we analyze it.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

var_label(MICSsimulated$id) <- "id"

var_label(MICSsimulated$country) <- "country"

var_label(MICSsimulated$GII) <- "Gender Inequality Index"

var_label(MICSsimulated$HDI) <- "Human Development Index"

var_label(MICSsimulated$cd1) <- "spank"

var_label(MICSsimulated$cd2) <- "beat"

var_label(MICSsimulated$cd3) <- "shout"

var_label(MICSsimulated$cd4) <- "explain"

var_label(MICSsimulated$aggression) <- "aggression"

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| label: tbl-varlabels
#| tbl-cap: "Variable Labels"

pander(labelled::look_for(MICSsimulated)[1:4]) # list out variable labels

```

## Explore The Simulated Data With A Graph

Exploring the simulated data with a graph helps us to ensure that we have simulated plausible data. 

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| message: false
#| label: fig-p1
#| fig-cap: "Graph of Simulated Data"

ggplot(MICSsimulated,
       aes(x = cd1, # x is spanking
           y = aggression, # y is aggression
           color = factor(country))) + # color is country
  geom_smooth(method = "glm", # glm smoother
              method.args = list(family = "binomial"),
              alpha = .1) + # transparency for CI's
  labs(title = "Aggression as a Function of Spanking",
       x = "spank",
       y = "aggression") +
  scale_color_viridis_d(name = "Country") + # nice colors
  theme_minimal()

```

## Explore The Simulated Data With A Logistic Regression 

Similarly, exploring the data with a logistic regression confirms that we have created plausible data. 

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| warning: false
#| eval: true

fit1 <- glmer(aggression ~ cd1 + cd2 + cd3 + cd4 + GII +
                (1 | country), 
              family = "binomial",
              data = MICSsimulated,
              control = glmerControl(optimizer ="bobyqa"))

summary(fit1) # table for PDF
  
```

## Write data to various formats

Lastly, we write the data out to various formats: R, Stata, and SPSS.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

save(MICSsimulated, 
     file = "./simulate-data/MICSsimulated.RData") # R

write_dta(MICSsimulated, 
          "./simulate-data/MICSsimulated.dta") # Stata

write_sav(MICSsimulated, 
          "./simulate-data/MICSsimulated.sav") # SPSS

```




