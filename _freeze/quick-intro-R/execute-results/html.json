{
  "hash": "1739b9a5efd27e166a83ff1321d74ac5",
  "result": {
    "markdown": "# A Quick Introduction to R\n\n## Why Use R?\n\nR has a reputation for being difficult to learn, and a lot of that reputation is deserved. However, it is possible to teach R in an accessible way, and **a little bit of R can take you a long way**.  \n\n[R](https://www.r-project.org/) is open source, and therefore free, statistical software that is particularly good at obtaining, analyzing and visualizing data.\n\nR Commands are stored in a *script* or *code* file that usually ends in .R, e.g. `myscript.R`. The command file is distinct from your actual data, stored in an .RData file, e.g. `mydata.RData`.\n\nA great deal of data analysis and visualization involves the same core set of steps.\n\nGiven the fact that we often want to apply the same core set of tasks to new questions and new data, there are ways to overcome the steep learning curve and learn a replicable set of commands that can be applied to problem after problem. **The same 5 to 10 lines of R code can often be tweaked over and over again for multiple projects.**\n\n$$\\text{have a question} \\rightarrow \\text{get data} \\rightarrow \\text{process and clean data} \\rightarrow$$ \n$$\\text{visualize data} \\rightarrow \\text{analyze data} \\rightarrow \\text{make conclusions}$$\n\n## Get R\n\n[R](https://www.r-project.org/) is available at [https://www.r-project.org/](https://www.r-project.org/). R is a lot easier to run if you run it from RStudio, [http://www.rstudio.com](http://www.rstudio.com).\n\n## Get Data \n\nData may already be in R format, or may come from other types of data files like SPSS, Stata, or Excel. Especially in beginning R programming, getting the data into R can be the most complicated part of your program.\n\n### Data in R Format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"./simulate-data/MICSsimulated.RData\") # data in R format\n```\n:::\n\n\n### Data in Other Formats\n\nIf data are in other formats, slightly different code may be required. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(haven) # library for importing data \nmydata <- read_sav(\"the/path/to/mySPSSfile.sav\") # SPSS\nmydata <- read_dta(\"the/path/to/myStatafile.dta\") # Stata\n\nlibrary(readxl) # library for importing Excel files\nmydata <- read_excel(\"the/path/to/mySpreadsheet.xls\")\n\nsave(mydata, file = \"mydata.RData\") # save in R format\n```\n:::\n\n\n## Process and Clean Data  \n\n### The `$` Sign\n\nThe `$` sign is a kind of \"connector\".  `mydata$x` means:  \"The variable `x` in the dataset called `mydata`\". \n\n### Recoding Data\n\nData sometimes need to be recoded. For example, outliers may need to be changed to missing, or a value that is supposed to indicated missing data (e.g. `-9`) may need to be changed to missing.\n\nRecoding uses the following construction: \n\n`data$variable[condition] <- new value`\n\nFor example, change an outlier value: When `cd1` is `2` change it to missing (`NA`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMICSsimulated$cd1[MICSsimulated$cd1 == 2] <- NA # outlier (2) to NA\n```\n:::\n\n\nChange variable cd1 to missing (`NA`) when it is `-9`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMICSsimulated$cd1[MICSsimulated$cd1 == -9] <- NA # missing (-9) to NA\n```\n:::\n\n\n\n### Numeric and Factor Variables\n\nR makes a strong distinction between *continuous* *numeric* variables that measure  scales like mental health or neighborhood safety, and *categorical* *factor variables* that measure non-ordered categories like religious identity or gender identity. \n\nMany statistical and graphical procedures are designed to recognize and work with different variable types. You often *don't* need to use all of the options.  e.g. `mydata$w <- factor(mydata$z)` will often work just fine. **Changing variables from factor to numeric, and vice versa can sometimes be the simple solution that solves a lot of problems when you are trying to graph your variables.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMICSsimulated$aggression <- \n  factor(MICSsimulated$aggression, # original numeric variable\n         levels = c(0, 1), \n         labels = c(\"no aggression\", \"aggression\"), \n         ordered = TRUE) # whether order matters\n\n# MICSsimulated$z <- as.numeric(MICSsimulated$w) # factor to numeric\n```\n:::\n\n\n## Visualize Data\n\n### Histogram\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(MICSsimulated$GII, # what I'm graphing\n        main = \"Gender Inequality Index\", # title\n        xlab = \"GII\", # label for x axis\n        col = \"blue\") # color\n```\n\n::: {.cell-output-display}\n![Histogram of Gender Inequality Index](quick-intro-R_files/figure-html/fig-hist-1.png){#fig-hist width=672}\n:::\n:::\n\n\n:::{.callout-tip}\nYou often *don't* need to use all of the options.  e.g. `hist(mydata$x)` will work just fine.\n:::\n\n\n### Barplot \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(table(MICSsimulated$aggression), # what I'm graphing\n        main = \"Child Displays Aggression\", # title\n        xlab = \"Aggression\", # label for x axis\n        col = \"gold\") # color\n```\n\n::: {.cell-output-display}\n![Barplot of Aggression](quick-intro-R_files/figure-html/fig-barplot-1.png){#fig-barplot width=672}\n:::\n:::\n\n\n:::{.callout-tip}\nYou often *don't* need to use all of the options.  e.g. `barplot(table(mydata$z))` will work just fine.\n:::\n\n## Analyze Data: Descriptive Statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mydata$x) # for continuous or factor variables\n\ntable(mydata$z) # especially suitable for factor variables\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(MICSsimulated$GII)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   15.0    22.0    24.0    24.2    27.0    31.0 \n```\n:::\n\n```{.r .cell-code}\ntable(MICSsimulated$aggression)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nno aggression    aggression \n         1316          1684 \n```\n:::\n:::\n",
    "supporting": [
      "quick-intro-R_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}