{
  "hash": "e9b042db128e43c1978807b12328a81a",
  "result": {
    "markdown": "# Quantitative Data Analysis {#sec-analysis}\n\n## Introduction\n\nA great deal of data analysis and visualization involves the same core set of steps.\n\n$$\\text{have a question} \\rightarrow \\text{get data} \\rightarrow \\text{process and clean data} \\rightarrow \\text{analyze data}$$ \n\n## Some Tools for Analysis\n\nBelow we describe some simple data cleaning with R. We begin, however, by comparing several different tools for analysis including: Excel, Google Sheets, R, and Stata.\n\n----------------------------------------------------------------------------\nTool     Cost         Ease         Analysis       Suitability   Keep                 \n                      of           Capabilities   for           Track of\n                      Use                         Large Data    Complicated\n                                                                Workflows\n-------- ---------    ------------ -------------  ------------  --------------\nExcel    Comes        Easy         Limited        Difficult     Difficult to\n         installed                                when          Impossible\n         on many                                  N > 100\n         computers\n\nGoogle   Free         Easy         Limited        Difficult     Difficult to\nSheets   with a                                   when          Impossible\n         Google                                   N > 100\n         account\n            \nR        Free         Challenging  Extensive      Excellent     Yes, with\n                                                  with          script\n                                                  large \n                                                  datasets\n                                                    \nStata    Some         Learning     Extensive      Excellent     Yes, with\n         cost         Curve                       with          command\n                      but                         large         file\n                      Intuitive                   datasets\n----------------------------------------------------------------------------\n\n## Working With R\n\n### Our Data\n\nWe take a look at our *simulated* data. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"./simulate-data/MICSsimulated.RData\") # data in R format\n\nlabelled::look_for(MICSsimulated) # look at data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n pos variable   label                   col_type missing values\n 1   id         id                      int      0             \n 2   country    country                 int      0             \n 3   GII        Gender Inequality Index int      0             \n 4   HDI        Human Development Index int      0             \n 5   cd1        spank                   int      0             \n 6   cd2        beat                    int      0             \n 7   cd3        shout                   int      0             \n 8   cd4        explain                 int      0             \n 9   aggression aggression              int      0             \n```\n:::\n:::\n\n\n\n### Cleaning Data\n\nThere are some basic data cleaning steps that are common to many projects.\n\n* Only keep the variables of interest. @sec-onlykeep\n* Add variable labels (if we can). @sec-addvarlabels\n* Add value labels (if we can). @sec-addvaluelabels\n* Recode outliers, values that are errors, or values that should be coded as missing @sec-recodes\n\n> Much of R's functionality is accomplished through writing *code*, that is saved in a *script*. Notice how--as our tasks get more and more complicated--the saved script provides documentation for the decisions that we have made with the data. A sample R script for the steps found in this chapter can be found in @sec-Rscript.\n\n#### Only keep the variables of interest. {#sec-onlykeep}\n\n> We can easily accomplish this with the `subset` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmynewdata <- subset(MICSsimulated,\n                    select = c(id, country, aggression)) # subset of data\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mynewdata) # look at top (head) of data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  id country aggression\n1  1       1          1\n2  2       1          1\n3  3       1          1\n4  4       1          1\n5  5       1          0\n6  6       1          1\n```\n:::\n:::\n\n\n#### Add variable labels (if we can). {#sec-addvarlabels}\n\n> Adding *variable labels* is still somewhat new in R. The `labelled` library allows us to add or change variable labels. However, not every library in R recognizes *variable labels*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(labelled) # variable labels\n\nvar_label(MICSsimulated$id) <- \"id\"\n\nvar_label(MICSsimulated$country) <- \"country\"\n\nvar_label(MICSsimulated$cd4) <- \"explain\"\n```\n:::\n\n\n\n#### Add value labels (if we can). {#sec-addvaluelabels}\n\n> In contrast, *value labels* are straightforward in R, and can be accomplished by creating a *factor variable*. Below we demonstrate how to do this with the happy variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMICSsimulated$cd4 <- factor(MICSsimulated$cd4,\n                             levels = c(0, 1),\n                             labels = c(\"Did not explain\",\n                                        \"Explained\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(MICSsimulated) # head (top) of data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  id country GII HDI cd1 cd2 cd3             cd4 aggression\n1  1       1  20  24   0   0   1       Explained          1\n2  2       1  20  24   0   0   1       Explained          1\n3  3       1  20  24   0   0   1       Explained          1\n4  4       1  20  24   0   0   0 Did not explain          1\n5  5       1  20  24   1   0   1       Explained          0\n6  6       1  20  24   0   0   1       Explained          1\n```\n:::\n:::\n\n\n#### Recode outliers, values that are errors, or values that should be coded as missing. {#sec-recodes}\n\n> We can easily accomplish this using Base R's syntax for recoding: `data$variable[rule] <- newvalue`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMICSsimulated$aggression[MICSsimulated$aggression > 1] <- NA # recode > 1 to NA\n\nMICSsimulated$GII[MICSsimulated$GII > 100] <- NA # recode > 100 to NA\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(MICSsimulated) # head (top) of data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  id country GII HDI cd1 cd2 cd3             cd4 aggression\n1  1       1  20  24   0   0   1       Explained          1\n2  2       1  20  24   0   0   1       Explained          1\n3  3       1  20  24   0   0   1       Explained          1\n4  4       1  20  24   0   0   0 Did not explain          1\n5  5       1  20  24   1   0   1       Explained          0\n6  6       1  20  24   0   0   1       Explained          1\n```\n:::\n:::\n\n\n### Simple Analysis\n\nOur first step in analysis is to discover what kind of variables we have. We need to make a distinction between *continuous variables* that measure things like mental health or neighborhood safety, or age, and *categorical variables* that measure non-ordered categories like religious identity or gender identity.\n\n* For continuous variables, it is most appropriate to take the *average* or *mean*.\n* For categorical variables, it is most appropriate to generate a *frequency table*.\n\n\n> As a mostly command based language, R relies on the idea of `do_something(dataset$variable)`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(MICSsimulated$GII) # descriptive statistics for GII\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   15.0    22.0    24.0    24.2    27.0    31.0 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(MICSsimulated$cd4) # frequency table of cd4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nDid not explain       Explained \n            674            2326 \n```\n:::\n:::\n",
    "supporting": [
      "quantitative-data-analysis_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}